version: '3.8'

services:
  # MongoDB with time-series support
  mongodb:
    image: mongo:6.0
    container_name: accountability-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: accountability
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    command: mongod --auth --wiredTigerCacheSizeGB 1
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NATS JetStream for event streaming
  nats:
    image: nats:2.9-alpine
    container_name: accountability-nats
    restart: unless-stopped
    ports:
      - "4222:4222"
      - "8222:8222"
    command: nats-server --jetstream --http_port 8222
    volumes:
      - nats_data:/data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Socket.IO scaling
  redis:
    image: redis:7-alpine
    container_name: accountability-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: accountability-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/accountability?authSource=admin
      NATS_URL: nats://nats:4222
      REDIS_URL: redis://redis:6379
      PORT: 5000
    ports:
      - "5000:5000"
    depends_on:
      mongodb:
        condition: service_healthy
      nats:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log Worker Service
  log-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: accountability-log-worker
    restart: unless-stopped
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/accountability?authSource=admin
      NATS_URL: nats://nats:4222
    depends_on:
      mongodb:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run worker
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notifier Service
  notifier:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: accountability-notifier
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NATS_URL: nats://nats:4222
      REDIS_URL: redis://redis:6379
      FRONTEND_URL: http://localhost:3000
      NOTIFIER_PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      nats:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run notifier
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React app
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: accountability-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5000
      REACT_APP_NOTIFIER_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
      notifier:
        condition: service_healthy
    volumes:
      - ./frontend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: accountability-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - backend
      - notifier

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: accountability-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus

volumes:
  mongodb_data:
    driver: local
  nats_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: accountability-network
